// Modern SCSS Mixins
@use "constant" as *;

// Media query mixin
@mixin media($breakpoint) {
  @if $breakpoint == sm {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  }
  @else if $breakpoint == md {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  }
  @else if $breakpoint == lg {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  }
  @else if $breakpoint == xl {
    @media (min-width: $breakpoint-xl) {
      @content;
    }
  }
}

// Focus visible mixin
@mixin focus-visible {
  &:focus-visible {
    outline: 2px solid var(--color-action);
    outline-offset: 2px;
  }
}

// Button reset mixin
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  cursor: pointer;
  font: inherit;
}

// Visually hidden mixin (sr-only)
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Fluid typography
@mixin fluid-type($min-size, $max-size, $min-vw: $breakpoint-sm, $max-vw: $breakpoint-xl) {
  font-size: clamp(#{$min-size}, calc(#{$min-size} + (#{strip-unit($max-size)} - #{strip-unit($min-size)}) * ((100vw - #{$min-vw}) / (#{strip-unit($max-vw)} - #{strip-unit($min-vw)}))), #{$max-size});
}

// Helper function to strip units
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Hover effects (respects user preferences)
@mixin hover-effects {
  @media (hover: hover) and (prefers-reduced-motion: no-preference) {
    &:hover {
      @content;
    }
  }
}